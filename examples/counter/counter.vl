// Counter adapted from https://www.chipverify.com/verilog/verilog-4-bit-counter

module counter (
    input clk,
    input rstn,
    output reg[7:0] out);
    always @ (posedge clk) begin // Execute when clk = 1
        if (!rstn)
            out <= 0;
        else
            out <= out + 1;
            $display("%d\t%d", rstn, out);
    end
endmodule

module tb;
    reg clk;
    reg rstn;
    wire [7:0] out;

    counter c0(.clk (clk),
               .rstn (rstn),
               .out (out));
    
    always #5 clk = ~clk; // flip-flop the clk every 5 ns

    initial begin
        clk <= 0;
        rstn <= 0;

        #20 rstn <= 1;
        #80 rstn <= 0;
        #50 rstn <= 1;

        #2570 $finish;
    end
endmodule